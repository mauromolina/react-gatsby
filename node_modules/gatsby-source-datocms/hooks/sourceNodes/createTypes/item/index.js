"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('humps'),
    camelize = _require.camelize,
    pascalize = _require.pascalize;

var objectAssign = require('object-assign');

var gqlItemTypeName = function gqlItemTypeName(itemType) {
  return "DatoCms".concat(pascalize(itemType.apiKey));
};

var simpleTypeResolver = function simpleTypeResolver(type) {
  return function (_ref) {
    var field = _ref.field;
    return {
      fieldType: type
    };
  };
};

var combineResolvers = function combineResolvers(resolvers) {
  return function (context) {
    return resolvers.reduce(function (acc, resolver) {
      return objectAssign(acc, resolver(context));
    });
  };
};

var dateType = {
  type: 'Date',
  extensions: {
    dateformat: {}
  }
};
var fieldResolvers = {
  "boolean": simpleTypeResolver('Boolean'),
  color: simpleTypeResolver('DatoCmsColorField'),
  date: simpleTypeResolver(dateType),
  date_time: simpleTypeResolver(dateType),
  file: require('./fields/file'),
  "float": simpleTypeResolver('Float'),
  gallery: require('./fields/gallery'),
  integer: simpleTypeResolver('Int'),
  json: simpleTypeResolver('JSON'),
  lat_lon: simpleTypeResolver('DatoCmsLatLonField'),
  link: require('./fields/link'),
  links: require('./fields/richText'),
  rich_text: require('./fields/richText'),
  seo: simpleTypeResolver('DatoCmsSeoField'),
  slug: simpleTypeResolver('String'),
  string: simpleTypeResolver('String'),
  text: require('./fields/text'),
  video: simpleTypeResolver('DatoCmsVideoField')
};

var isSimpleFieldType = function isSimpleFieldType(x) {
  return typeof x === 'string' || !x.resolveFromValue;
};

module.exports = function (_ref2) {
  var entitiesRepo = _ref2.entitiesRepo,
      actions = _ref2.actions,
      schema = _ref2.schema;
  entitiesRepo.findEntitiesOfType('item_type').forEach(function (entity) {
    var type = gqlItemTypeName(entity);
    var fields = entity.fields.reduce(function (acc, field) {
      var resolver = fieldResolvers[field.fieldType];

      if (resolver) {
        var _resolver = resolver({
          parentItemType: entity,
          field: field,
          gqlItemTypeName: gqlItemTypeName,
          schema: schema,
          entitiesRepo: entitiesRepo
        }),
            _resolver$types = _resolver.types,
            types = _resolver$types === void 0 ? [] : _resolver$types,
            fieldType = _resolver.fieldType,
            nodeFieldType = _resolver.nodeFieldType;

        var valueFieldType = isSimpleFieldType(fieldType) ? fieldType : {
          type: fieldType.type,
          resolve: function resolve(parent, args, context) {
            var value = fieldType.normalResolver(parent, args, context);
            return fieldType.resolveFromValue(value, args, context);
          }
        };
        actions.createTypes(types);
        objectAssign(acc, _defineProperty({}, camelize(field.apiKey), valueFieldType));

        if (nodeFieldType) {
          var nodeValueFieldType = isSimpleFieldType(nodeFieldType) ? nodeFieldType : {
            type: nodeFieldType.type,
            resolve: function resolve(parent, args, context) {
              var value = nodeFieldType.normalResolver(parent, args, context);
              return nodeFieldType.resolveFromValue(value, args, context);
            }
          };
          objectAssign(acc, _defineProperty({}, "".concat(camelize(field.apiKey), "Node"), nodeValueFieldType));
        }

        if (field.localized) {
          var parentItemTypeName = gqlItemTypeName(entity);
          var allLocalesTypeName = "DatoCmsAllLocalesFor".concat(parentItemTypeName).concat(pascalize(field.apiKey));
          var allLocalesFieldType = isSimpleFieldType(fieldType) ? fieldType : {
            type: fieldType.type,
            resolve: function resolve(parent, args, context) {
              var value = fieldType.allLocalesResolver(parent, args, context);
              return fieldType.resolveFromValue(value, args, context);
            }
          };
          var _fields = {
            locale: 'String',
            value: allLocalesFieldType
          };

          if (nodeFieldType) {
            var allLocalesNodeFieldType = isSimpleFieldType(nodeFieldType) ? nodeFieldType : {
              type: nodeFieldType.type,
              resolve: function resolve(parent, args, context) {
                var value = nodeFieldType.allLocalesResolver(parent, args, context);
                return nodeFieldType.resolveFromValue(value, args, context);
              }
            };
            objectAssign(_fields, {
              valueNode: allLocalesNodeFieldType
            });
          }

          actions.createTypes([schema.buildObjectType({
            name: allLocalesTypeName,
            extensions: {
              infer: false
            },
            fields: _fields
          })]);
          objectAssign(acc, _defineProperty({}, "_all".concat(pascalize(field.apiKey), "Locales"), "[".concat(allLocalesTypeName, "]")));
        }
      }

      return acc;
    }, {});

    if (entity.sortable || entity.tree) {
      objectAssign(fields, {
        position: 'Int'
      });
    }

    if (entity.tree) {
      objectAssign(fields, {
        treeParent: {
          type: type,
          extensions: {
            link: {
              by: 'id',
              from: 'treeParent___NODE'
            }
          }
        },
        treeChildren: {
          type: "[".concat(type, "]"),
          extensions: {
            link: {
              by: 'id',
              from: 'treeChildren___NODE'
            }
          }
        },
        root: 'Boolean'
      });
    }

    actions.createTypes([schema.buildObjectType({
      name: type,
      extensions: {
        infer: false
      },
      fields: objectAssign(fields, {
        meta: 'DatoCmsMetaField',
        originalId: 'String',
        locale: 'String',
        seoMetaTags: {
          type: 'DatoCmsSeoMetaTags',
          extensions: {
            link: {
              by: 'id',
              from: 'seoMetaTags___NODE'
            }
          }
        },
        model: {
          type: 'DatoCmsModel',
          extensions: {
            link: {
              by: 'id',
              from: 'model___NODE'
            }
          }
        }
      }),
      interfaces: ["Node"]
    })]);
  });
};