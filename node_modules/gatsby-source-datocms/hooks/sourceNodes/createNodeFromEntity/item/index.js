"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = require('humps'),
    camelize = _require.camelize,
    pascalize = _require.pascalize;

var entries = require('object.entries');

var buildNode = require('../utils/buildNode');

var buildSeoMetaTagsNode = require('./buildSeoMetaTagsNode');

var itemNodeId = require('./itemNodeId');

var addField = require('./addField');

module.exports = function buildItemNode(entity, _ref) {
  var _ref2;

  var entitiesRepo = _ref.entitiesRepo,
      localeFallbacks = _ref.localeFallbacks;
  var siteEntity = entitiesRepo.site;
  var type = pascalize(entity.itemType.apiKey);
  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(siteEntity.locales.map(function (locale) {
    var additionalNodesToCreate = [];
    var i18n = {
      locale: locale,
      fallbacks: localeFallbacks
    };
    var itemNode = buildNode("DatoCms".concat(type), "".concat(entity.id, "-").concat(locale), function (node) {
      node.locale = locale;
      node.model___NODE = "DatoCmsModel-".concat(entity.itemType.id);
      entity.itemType.fields.forEach(function (field) {
        addField(node, camelize(field.apiKey), entity, field, node, entitiesRepo, i18n, additionalNodesToCreate);

        if (field.localized) {
          node["_all".concat(pascalize(field.apiKey), "Locales")] = entries(entity[camelize(field.apiKey)] || {}).map(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
                locale = _ref4[0],
                v = _ref4[1];

            var result = {
              locale: locale
            };
            var innerI18n = {
              locale: locale,
              fallbacks: localeFallbacks
            };
            addField(result, 'value', entity, field, node, entitiesRepo, innerI18n, additionalNodesToCreate, "".concat(camelize(field.apiKey), "-").concat(locale, "-"));
            return result;
          });
        }
      });
      var seoNode = buildSeoMetaTagsNode(node, entity, entitiesRepo, i18n);
      additionalNodesToCreate.push(seoNode);
      node.seoMetaTags___NODE = seoNode.id;
      node.meta = entity.meta;
      node.originalId = entity.id;

      if (entity.itemType.sortable) {
        node.position = entity.position;
      }

      if (entity.itemType.tree) {
        node.position = entity.position;
        node.root = !entity.parentId;
        node.treeChildren___NODE = [];

        if (entity.parentId) {
          var parentId = itemNodeId(entity.parentId, locale, entitiesRepo);
          node.treeParent___NODE = parentId;
        }
      }
    });
    return [itemNode].concat(additionalNodesToCreate);
  })));
};