"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('humps'),
    camelize = _require.camelize;

module.exports = function (_ref) {
  var parentItemType = _ref.parentItemType,
      field = _ref.field,
      schema = _ref.schema,
      gqlItemTypeName = _ref.gqlItemTypeName,
      entitiesRepo = _ref.entitiesRepo;
  var fieldKey = camelize(field.apiKey);
  return {
    fieldType: {
      type: '[DatoCmsFileField]',
      allLocalesResolver: function allLocalesResolver(parent) {
        return parent.value;
      },
      normalResolver: function normalResolver(parent) {
        return parent[fieldKey];
      },
      resolveFromValue: function resolveFromValue(fileObjects, args, context) {
        if (!fileObjects) {
          return null;
        }

        return fileObjects.map(function (fileObject) {
          var upload = context.nodeModel.getNodeById({
            id: fileObject.uploadId___NODE
          });
          var defaults = upload.defaultFieldMetadata[fileObject.locale];
          return _objectSpread({}, upload, {
            alt: fileObject.alt || defaults.alt,
            title: fileObject.title || defaults.title,
            customData: _objectSpread({}, defaults.customData, {}, fileObject.customData)
          });
        });
      }
    }
  };
};