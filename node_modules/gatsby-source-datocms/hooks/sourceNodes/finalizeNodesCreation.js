"use strict";

var _require = require('humps'),
    camelize = _require.camelize,
    pascalize = _require.pascalize;

var updateDigest = require('./createNodeFromEntity/utils/updateDigest');

function addChildrenToTreeLikeCollection(itemType, _ref) {
  var entitiesRepo = _ref.entitiesRepo,
      getNodesByType = _ref.getNodesByType,
      actions = _ref.actions;
  var nodes = getNodesByType("DatoCms".concat(pascalize(itemType.apiKey)));
  var childrenByNode = {};
  nodes.forEach(function (node) {
    if (node.treeParent___NODE) {
      childrenByNode[node.treeParent___NODE] = (childrenByNode[node.treeParent___NODE] || []).concat([{
        position: node.position,
        id: node.id
      }]);
    }
  });
  nodes.forEach(function (node) {
    var children = childrenByNode[node.id] ? childrenByNode[node.id].sort(function (a, b) {
      return a.position - b.position;
    }).map(function (_ref2) {
      var id = _ref2.id;
      return id;
    }) : [];

    if (node.treeChildren___NODE.join(',') !== children.join(',')) {
      node.treeChildren___NODE = children;
      updateDigest(node);
      actions.createNode(node);
    }
  });
}

function addChildrenToTreeLikeCollections(context) {
  var entitiesRepo = context.entitiesRepo;
  entitiesRepo.findEntitiesOfType('item_type').filter(function (itemType) {
    return itemType.tree;
  }).forEach(function (itemType) {
    return addChildrenToTreeLikeCollection(itemType, context);
  });
}

module.exports = function finalizeNodesCreation(context) {
  addChildrenToTreeLikeCollections(context);
};