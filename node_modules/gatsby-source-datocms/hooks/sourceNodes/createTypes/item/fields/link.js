"use strict";

var _require = require('humps'),
    camelize = _require.camelize,
    pascalize = _require.pascalize;

module.exports = function (_ref) {
  var parentItemType = _ref.parentItemType,
      field = _ref.field,
      schema = _ref.schema,
      gqlItemTypeName = _ref.gqlItemTypeName,
      entitiesRepo = _ref.entitiesRepo;
  var fieldKey = camelize(field.apiKey);
  var parentItemTypeName = gqlItemTypeName(parentItemType);
  var itemTypeIds = field.validators.itemItemType.itemTypes;

  if (itemTypeIds.length === 0) {
    return {
      fieldType: 'String'
    };
  }

  if (itemTypeIds.length === 1) {
    var linkedItemType = entitiesRepo.findEntity('item_type', itemTypeIds[0]);
    return {
      fieldType: {
        type: gqlItemTypeName(linkedItemType),
        allLocalesResolver: function allLocalesResolver(parent) {
          return parent.value___NODE;
        },
        normalResolver: function normalResolver(parent) {
          return parent["".concat(fieldKey, "___NODE")];
        },
        resolveFromValue: function resolveFromValue(id, args, context) {
          if (id) {
            return context.nodeModel.getNodeById({
              id: id
            });
          }
        }
      }
    };
  }

  var unionType = "DatoCmsUnionFor".concat(parentItemTypeName).concat(pascalize(field.apiKey));
  var unionTypes = itemTypeIds.map(function (id) {
    return gqlItemTypeName(entitiesRepo.findEntity('item_type', id));
  });
  return {
    types: [schema.buildUnionType({
      name: unionType,
      types: unionTypes
    })],
    fieldType: {
      type: unionType,
      allLocalesResolver: function allLocalesResolver(parent) {
        return parent.value___NODE;
      },
      normalResolver: function normalResolver(parent) {
        return parent["".concat(fieldKey, "___NODE")];
      },
      resolveFromValue: function resolveFromValue(id, args, context) {
        if (id) {
          return context.nodeModel.getNodeById({
            id: id
          });
        }
      }
    }
  };
};